using System;
using System.Collections.Generic;
using System.Text;

namespace AdventOfCode2020
{
    public class Day05
    {
        // https://adventofcode.com/2020/day/5

        static void Main(string[] args)
        {
            List<String> input = new List<string>() { "FBBFFBBLLL", "FFBFFFBRLL", "FFBBBBFRRL", "FBFBBBBRLL", "BFBBBBFLLR", "FFFBBBBLRR", "BFFFFFBLLL", "BBFFFBFRRL", "FFBFFFFLLR", "BFFFBBBRRL", "FBFBFFFLRL", "FFFBBFBLRR", "FBFBFBFLRR", "FBBBBFBRRL", "BFFBFFBRRR", "FBBBFBBRLL", "FBFFBFBRLR", "BBFBFFFLRL", "FFBFFFFRLR", "FFBBFBFRRR", "BFBBBFBLRR", "FFBBFFFLRL", "FBBBBFFRLR", "FBBBBBBRLR", "FFBFBFBLLL", "BBFBFBBLLL", "FFFFFBBRRL", "FBFFBFBRRR", "FFFBFFFRLL", "BFBFBFFLLL", "BFBFFBFLLL", "FFFFBFFRRL", "FBFFFFFRLR", "FBBFFBBLLR", "BFFFFFBLRL", "BFBFFFBLLR", "FBBBBBBLLL", "BBFBFBFLLL", "FFBFFBFLRR", "BBFFFBBRLL", "FFBFFFFLLL", "FBBFFBFLLL", "FFFBBBFRRR", "BFBBFBFRLL", "FBBFBFFRRL", "FBFBBFBLRR", "FFBBBBBRLR", "FFBFBFFLLL", "FBFFFBFRRL", "BFFBBFFRLL", "BFFBBFFLLR", "BBFFBFFRRL", "FBFBFBFLLR", "BBFFBFBLRL", "BFBFBFBLRR", "FFBBFBBRRL", "BFBBBFBRLR", "FBFFFFBLLR", "BFBFFBBLRR", "BBFBFBFRRR", "FFBFBBBRRL", "BFBFBBFRLR", "FBFBBBBRLR", "BFFFFBBRRR", "BBFFFBFLLR", "FBFFFFBRRL", "BBFFBFBLLL", "BFFFBBBLLL", "FFBFFFBLRR", "BFBFBBBRRR", "FBFFBFFRRR", "BFFBFFBLLL", "BFBBFFFLRL", "BBFBFFBRLR", "FBBFFFFLLL", "FBFFFFBLLL", "BBFFFFBRLR", "BBFBFFBRRL", "FBBFBFBRRR", "FBFFBFFLRR", "FFBBBFBLLR", "FFFFFBFRRR", "BFBBBBBLLR", "BBFBFFFRLL", "BFFBFBBLRR", "BFFBBFBRLL", "FBFFBFFRLR", "FBFBBFFLLR", "FFFFFBFRRL", "FFBFFBFRLR", "FBFBBBFLLL", "FFBFBBFLLR", "FBFFBBBRLR", "FFFBFBFLLR", "BFBBFBBLRL", "BFFFFBFLLL", "BFBFFBFLRL", "BBFFBFBLLR", "BFFFBFBRRL", "BBFBFFBLLR", "FFBBFFFRLL", "FFFFFBBRLR", "FFBFBFBRLL", "FBBBBFBLRR", "FFFBFFFRRL", "FFFFBFFLRL", "FFFFBFFRLR", "BFFFFFFRRR", "BBFFBFBRRL", "BBFBFFFLRR", "FFBBBFFLLR", "FBFBFBBRLR", "FBBFBBBLRR", "BFFBBBFRLL", "BFBBFBBLLL", "FBFFFBBLLR", "FBBBBFFRRL", "BFBBFFFLLR", "BFBBBFFLRL", "FFBFFBBRLL", "FBFBFFBRRR", "FBBFBBBLRL", "BFFFBFFLRL", "BFFBFFBLRR", "BFBFBBFLRL", "FBFBBFFRLL", "BFFFFBBRRL", "FFBBBBBLRL", "FBBFFBFRRL", "BBFFBFBRLL", "FBFFFFFLRL", "FFFBFBFRLR", "FFBBBBFLLR", "FFFBBBFRLR", "FFBBFFBRRR", "FFFBFFBLRL", "FBFBFBBLLL", "BFFFFBBLRR", "BBFFBBFLLR", "FFFFFFBRLL", "FBBBBBBLRR", "FFFFBFBLLR", "BBFFBBFRRL", "BFBBBBBLRR", "BFBBFBBLRR", "BBFFFFBRRR", "BFBBBFBLLR", "BBFFBBBRRR", "FBBFBFBRLL", "FFFFFBBLRR", "BBFBFBBLLR", "FBFFFBFRLR", "BBFFBFFLLR", "BBFBFFFRLR", "FFFFBFBLRL", "FFBBBBBLRR", "FBBBFFBLRR", "FBBFBBFRLL", "FBBFBFBRLR", "FFBFBBBLRL", "FBFFBBBLLL", "FFFBBBBRRR", "FFBFFBFLRL", "BFFFBBFRLL", "BFFFFBBLLR", "BFFFFFBRRL", "BFFBFBBRRL", "FFBFFFBRRL", "BFFBFFFLRL", "BFFBBBFLLL", "FFBBFFFLRR", "FBBBFFBRLL", "FFBBFFFRLR", "BFBFBFFRLL", "FFFFBBFRRR", "BFBFBBFRRL", "FBFBBBFLRL", "FFFBFBBRLL", "FFBBBFFLLL", "BBFFFBBLRL", "FBBBFFBRRR", "BFBFBFBLLL", "FFBFFBBRLR", "FFBFBBBRLR", "FFFFFFBRLR", "BFFBBFFLRL", "FFBFFBFRRR", "FFBFBFFRLL", "FBFBFFBLLR", "FBFBFBBRRR", "FFFBBFBRRR", "FBBBBFBLLR", "FFFFBFBRLR", "FFFBBBFRLL", "FBFFBFBLLL", "FBFBFFFLRR", "FFFBBFFLLL", "BFBFFFFLLL", "BBFFFBFLLL", "FFFFBFBRRL", "FFBBBFBRRL", "BFBFFBBRLR", "FFFBBFFLRL", "FFFBFBBLLR", "FFBBBFFRLR", "FBBBBFBLRL", "BFFFBBFLLL", "BFFBFBFLLR", "FBFFBBFLRR", "BFFBBBBLLR", "FBBBFFFRRR", "FBFFBFBLRL", "BFFFFFFRLR", "FBBBBFBRRR", "FFBBBBFLRL", "BBFBFFBLRL", "BFBFBBBLRR", "FFFFFBFLLR", "FBBFFBFLLR", "BFFFFBBRLL", "FFBFBBBLRR", "FFFFBFFLLR", "BBFFFFFRLR", "FBBBBFFRLL", "BFFFBFBLRR", "FBFBBBBLLR", "BFFBFFBRLL", "BFBFBFFLRR", "BFFFFBFLRR", "FBBFFBFLRR", "BFFBBFBLLR", "FBBFFFBLRL", "FBFBFBBRRL", "FBFFBFFRRL", "BFBBFBFLLR", "FFFFBFFLRR", "BFBFFFBLRL", "BFFBBBBRRR", "FFFFBBBLRR", "FFFBBFBLLL", "FFBBFBFLLR", "BFBBFBFLLL", "FBBFBFFLLR", "FFFBBFFRRR", "FFBBBBBRRR", "FFFBFFFRLR", "BFFBFBFLRR", "FBFFBFBRLL", "FFFFBFFLLL", "FFBBBFFRLL", "FBFBFFBLLL", "FBFBBBFLLR", "BFBBBFFRLL", "BFBBBBBRRL", "FFFFFFBRRL", "FBBFBBFLRL", "BFFBFBBRLL", "FFFFFBFLRL", "BFBFFFBLRR", "BBFFFBFLRR", "BFBFBBBLRL", "FBFFFFBRLR", "BFBFBBBLLL", "BFFFFFFRRL", "FBBFFFBRRR", "FBBFBFFLRL", "BBFFFFFLRL", "BFFFFBBLRL", "FBFBBFFRRR", "FBBFFFFLRR", "FFFBFFFLRR", "FBFBBFFRRL", "BFFBFFBRRL", "BFFBFBFRRL", "FFBBFBBLLR", "FBFFBFFRLL", "BFBFFBBLLL", "FFBBFFBLLL", "BBFFFBBRRL", "BFFFFFFLLL", "FFBBBBFRLL", "BFBBBBFRRR", "BFFBBBBRLR", "FBFFBBFRLL", "BBFBFFBLRR", "FBFFBBBLRR", "BBFBFFFRRL", "BFBFFFFLRR", "BFBFFBBRRR", "FBBFFFBLLL", "BFFBBBFRLR", "BFFFFBFRLL", "FBFBBBBRRL", "BBFFBBFLRL", "FBBBBFFLLR", "BFBBFFBRRR", "FBBFFBBLRR", "FBBBBBBRRL", "BBFFFBBLLR", "BFBBBBFLRL", "BFFBFFFRLR", "FFFFBFBRRR", "FFFFBFBRLL", "BFFFFFFRLL", "BFFFBBBRLL", "FFFFFBBLLL", "FBFFFBFLRR", "FBFBFBFLLL", "BFBBFFBRLL", "BFFFBBFRLR", "BFBBFFFRLL", "FFFBBFBLRL", "BBFFFFFLRR", "BBFFFBFRLR", "BFBBBBFLRR", "FBFFFBBLLL", "BBFFBFBRRR", "FBFBFBBLRR", "FBBFBFFRLR", "FBFBBBBLLL", "FFFBBFBLLR", "FFFFBBBRRL", "FFBBBBFRLR", "FFFBFFBRRL", "BFBBFBBLLR", "FFBFFFFLRL", "BFFBFBFRLR", "FFBBFBBLLL", "BFFBBBFLRL", "FFFFFBFRLL", "BFFBFFBRLR", "BFFFBFFRRL", "BFBFBBBRLL", "BFFFFFBLRR", "FBBFFBBRLL", "FFFFBBBLRL", "BBFFFFBLRR", "BFBFBBBLLR", "BFFFBFFRLR", "BFBBFBFRRR", "BFFBBBFLRR", "FFBFBBFRRR", "FBBBFBFRLR", "BFBFFBBRLL", "BBFFBFFRLL", "BFFFBFBLLR", "FBFBBFFLRL", "BFFFFBBLLL", "BFBBFBBRRL", "BFFFBFFLLL", "BFBBBFBLLL", "FFBBFBFLRR", "FFBBFBFRLR", "BFBBBFFRRR", "BBFBFFFLLL", "BFFFFFBRLL", "FBBFBBFRRR", "BFFFBBFLRR", "BFFBBBFRRL", "FFBFFFFRRL", "FBFFBFBLRR", "FFBFBFBRLR", "BBFFBFFLRR", "BFFBBFFLLL", "FFBBBFBRRR", "BBFFBFFRRR", "FBBFFFFRRR", "FBBBBFFLRR", "FBBFBBBRRR", "FFBFBFBLRL", "FBBFFFBLRR", "FBFFBFFLRL", "BFBBFFFRRR", "FBFBBBFRLR", "BFFFFFBRRR", "FBFBFFFRRR", "BBFFFBFLRL", "FFBFBFBLLR", "FBFFFBBRRL", "FBBBFFBLLL", "BFBFBFFRRR", "FBFFBBBRLL", "FFBFFBBLLR", "FFBBFBBRLL", "BFBFBBFRLL", "BFBBFFBLLL", "BFFBBBFRRR", "BFBFBFBRRL", "BFFFFFFLLR", "BFFFBBBRRR", "FBBBFBFRRR", "FFFBFFBRLL", "BFFFFBFLRL", "FBFBBFFRLR", "FBBBBBFLRL", "FFFBBBFRRL", "BFBFFFFLLR", "FBFFFBBLRR", "FBBFBBBRRL", "FFFBBBFLRR", "BFBFFBFRRL", "BFFFBBFRRL", "FBBBFFBLLR", "FFBBFBBLRL", "BBFBFBFRLR", "FFBFFBFLLL", "FFFFBFBLLL", "BBFFFFBRLL", "FBFFFBBRLR", "FFBBBFFRRR", "FFFBFFFRRR", "FFBFBBBLLR", "FFBFFFBRLR", "FFBBBFBLRR", "BFFBBBBLRL", "BFFFFBFRRR", "BBFBFBFRLL", "FBFBBBFLRR", "FFFFFBFLLL", "BFBBBFFLLR", "BFFBFBFRRR", "BFBBFFBLRR", "BBFFFBBRLR", "FBBBBBBLRL", "BFFBBBBRRL", "FFBFBFFRLR", "BFFFFFBLLR", "BBFFFFBRRL", "FFFBBFFLRR", "BFFFFBFRRL", "BBFFBFFLRL", "BBFBFBFLRR", "FBFBBBBLRR", "BFFBBFBRRR", "FFFBBBBRLL", "FBFBBBFRRL", "FFFFFFBRRR", "BFFFFFFLRL", "FFBBFFFLLR", "FBBFBFBLLL", "FBBFBBFRLR", "BFFBFFBLLR", "FBFBBFBRLL", "FBFBFBFLRL", "FFBFFFBLLR", "FBBFFBBLRL", "FFFBBBBLLR", "BFFBBBBLRR", "BFFBFBBLLR", "FFBBFFBRLR", "FBBBBFFLLL", "BFFFFFBRLR", "BFBBBBFRLL", "FFFBBFFRLR", "BFFFBFBLLL", "BBFFFFFRRL", "FBFFFFBRLL", "BFBFBFBLRL", "FBBFBBFLRR", "FFBFBBFLRR", "FFBFBFFLRR", "FFBFFFFRLL", "BFBFBFBRRR", "FBBBBFFLRL", "FFBFFFBLLL", "BFBBBFFRLR", "FBFBFFBRLL", "FBBBBBFRRL", "FBFFBFFLLL", "BBFFBBBLLR", "BFFFBFFRRR", "BBFFBBBRLL", "BBFFFBBLRR", "FBBFBBBRLR", "BFBFBBFRRR", "FBFFBBFLRL", "FFFFBBFLRR", "BFFFBFBRLL", "BBFFFFFRLL", "FFFBFBFRRR", "BFBBBBFLLL", "FFBBBFBRLR", "FFFFBBBRRR", "BFBFFBFRLR", "FBFFBBFLLL", "FFBFFBBLRR", "FBFBFFBLRR", "FFBFFBBRRL", "FFFBBBBRRL", "BFFBFBBLRL", "BBFFBBBLRR", "FFFBBFBRLL", "FFFBFBBLRL", "BFBFFFBRRL", "FBBFFFFLLR", "BBFBFFBLLL", "BFBFBBFLLR", "BFFBFBBRRR", "FBFFFFFLLR", "FFBBBFFLRL", "FBFFBBFRLR", "BFFFBFBLRL", "FBFBBBFRRR", "FFBFFBFRRL", "FBFBBFBRLR", "BFBFBFFRLR", "FBFFBBBRRR", "BBFBFFFLLR", "FBBFBBBLLL", "FFBBBFBLLL", "FFBFFFFRRR", "BFFBFBFLLL", "BFFBBBFLLR", "FBBBBBBRLL", "FBBFFBFRLL", "FFFBFFBLLR", "FFBBFFBLRL", "BFBBFBFLRR", "BFBFFFBLLL", "FBFFFBBRRR", "FFBFBFFLLR", "FBFFBBBRRL", "FBBBBFBLLL", "FFFFFBBLLR", "FBBFBFBLRL", "BFBBFBBRLL", "FFFFBFBLRR", "BBFFBBFLLL", "FBBBFBFRLL", "FBFBBFBLLL", "BBFBFBFLLR", "BFBFBFBRLR", "FFFFFBFRLR", "FFFFFBBRLL", "FBFBFBFRRR", "FBBBFBFLRL", "BBFFBBBLRL", "FFBBBBBRLL", "FBBBFBBRRR", "BFFFBBBLLR", "BFBBBBBRLL", "FFFFFBBLRL", "BBFFBFFRLR", "BFBFBFBRLL", "FFFFBBFLLL", "BFBFBFFRRL", "FFBBFFBLLR", "BFBBFFFLLL", "BFBBFFBRLR", "FBFBFFBRLR", "FBFFFBFRLL", "FBBFBFFLRR", "FBBFFBFRRR", "BFBFFFFRLL", "BFFFBBBLRL", "FBFBBBBRRR", "BBFFBBFLRR", "FBBBBFBRLL", "BBFFBBBRRL", "BFBBBFFLLL", "FBFFFFBLRL", "FBFFFFFRRL", "BFBBBFFLRR", "FBBFBFBLRR", "FBFBFBBLRL", "FFBFBFFRRL", "BFFBBFBRLR", "FFBFFBBLLL", "FBBBFBBLLL", "FBBBFBBRRL", "FBBBFBBLLR", "FBFFFBFLLL", "FBBBFFBRLR", "FBBFBBBRLL", "FBBFFFBLLR", "FFFBFBBRRR", "FBBFFFFLRL", "BFFFFBFRLR", "FBBBFFFLLL", "FFBBFBFLLL", "BBFFFFFRRR", "BBFFFBFRRR", "FFBFFBBLRL", "FBBBFFBLRL", "FFBBFBFRRL", "FBFFFBFLRL", "FBBBFFFLRL", "FFFFBBBRLR", "FFBBFBBRLR", "FBFBFFBRRL", "BFBFFBFRRR", "BFBFBFFLRL", "BFFBFFFLLL", "FBBFBFBRRL", "FFBBBFBLRL", "BFFFFBFLLR", "FBBBFBFLLL", "FBFFFBBLRL", "FBBFFFBRRL", "FBBBBBFLLR", "FBBBFBFRRL", "FFFBBFBRRL", "FBBBFFBRRL", "FBFBFBBRLL", "BFBBBBBLLL", "FBFBFFFLLR", "FFFBFFBRLR", "BBFFBFBLRR", "BFFFBFFLLR", "FBBFBBFRRL", "FFBBBBBLLL", "FBBFBFFRLL", "FFFBBBFLRL", "FFBBBBFLRR", "FBFFFFFRLL", "BBFFFFBLLR", "FFFFBBFRRL", "FFBBBBFRRR", "FBBBFBBLRL", "BFFBBFBLRL", "BFBBFFFRLR", "FFFBFBBRRL", "BBFBFBFRRL", "FFFBBBFLLR", "BFFFFBBRLR", "BFFBFFFLLR", "BBFBFFFRRR", "FFFFBBFRLR", "BFBBBFBRRR", "FBFBBBBLRL", "FFFFBBFLLR", "FBFBBBFRLL", "BFBBFBBRLR", "FFBBFFFRRR", "FFBBBFBRLL", "FBBFFBFLRL", "BFBFFFBRRR", "BFFFBBBRLR", "FFFFBFFRRR", "FFBBFFBLRR", "FBBFBFBLLR", "FFFBBBFLLL", "FBBBBBFLLL", "FFFFBBBLLL", "FFFBFFBLLL", "BFBBBBBRLR", "BFBFBBFLRR", "FBFBBFBRRR", "BFBBFFFLRR", "FFBBFFFLLL", "BFFFBBFLLR", "FFBBFBFRLL", "FBBBFFFRLL", "FFFBBFBRLR", "BFBFFBFLRR", "FBFBBFBLLR", "FBFFFFBRRR", "FFFBFBBLLL", "FBFBFFFRRL", "FFFBFBFLRR", "FFBBBBBRRL", "FFFBFFFLLR", "BFFFBFFRLL", "BFBBBBBLRL", "FBBBFBFLRR", "FFFFBBBLLR", "BFFFBFFLRR", "FBBBBBFLRR", "FBBBBBFRLR", "BFFBFFFRRR", "FFBFBBFLRL", "FFBFBBFRRL", "FFBFFBBRRR", "FFFFBBFRLL", "BBFBFBFLRL", "FBFBBFFLLL", "BBFFFFBLLL", "FBBBBFFRRR", "BFFBFBFRLL", "BFBBFBFRRL", "FFBFBBFLLL", "FBFFFBFRRR", "FFBFFBFLLR", "BFBBFFBRRL", "FBBFFBBRRR", "FFBFBBBRLL", "FBBBBBBLLR", "FBFBBFBRRL", "BFFBFFFRLL", "BBFFBBFRRR", "FBBBBBFRLL", "FBBFFFFRLR", "FBBFFBBRLR", "BFBFBFBLLR", "FBFFBFBRRL", "FFFBBFFRRL", "FFBFBBFRLR", "BFFBFBBRLR", "BFFFBFBRRR", "BFBBBFFRRL", "FBBBFBBLRR", "FFFBFBFRLL", "FFBBFFBRLL", "FFFBBBBRLR", "FBBBFBFLLR", "BFBFBBBRRL", "FBBBFFFRLR", "FBFFFFFLRR", "FFBFBFFRRR", "FFFBFBBLRR", "FBBFBFFLLL", "FFBFFBFRLL", "FFBBBFFLRR", "FFBFBFBRRR", "FFFBBBBLRL", "FFBFBFFLRL", "FBFBBFBLRL", "FFFBFBFLRL", "BFBFFBFLLR", "BBFFFBFRLL", "FFBBBBBLLR", "BBFFFBBLLL", "BBFBFFBRRR", "BFBFFFBRLL", "FFFBFBFRRL", "FFBFFFFLRR", "BBFFFFFLLL", "FBBBFFFLRR", "BFFFBBFRRR", "FBBFBBBLLR", "BFBFFFFRRL", "FFBBFFBRRL", "BFBFFBBLRL", "BBFFFBBRRR", "FFFBBFFRLL", "BFFBBFBRRL", "BFFFFFFLRR", "BFBBBBFRLR", "FBBFFBFRLR", "BFFBBFFRRL", "BFFBFFFRRL", "FFFFBBBRLL", "FBFBFFFRLR", "BBFFBBFRLR", "BBFFBBFRLL", "BFFFBBFLRL", "FBFFBFFLLR", "BFBBFBFLRL", "FBFBFBFRLL", "BFBFBBBRLR", "BFBFFBBLLR", "FBBBBFBRLR", "FBFFFFBLRR", "FBFFBBFRRR", "BBFFBFFLLL", "FFFBFBFLLL", "BFFBBFFRRR", "FBBFBFFRRR", "BBFFBBBRLR", "FFFBFFBLRR", "FBFBFBFRLR", "BFBBBBBRRR", "BFFBFBFLRL", "BBFFBBBLLL", "BBFFFFFLLR", "BFBFFBFRLL", "BFBBBBFRRL", "BFBBFFBLRL", "BFFBBFBLLL", "BFFBBBBLLL", "BFBFBBFLLL", "FBFBFFFRLL", "FBFBFBFRRL", "BFFBFBBLLL", "FFBBFBBRRR", "FFFBFFBRRR", "FBFFFBFLLR", "FBFFFFFRRR", "FBBFBBFLLL", "FFFBFBBRLR", "FBFFFFFLLL", "FBBFFFFRRL", "BFBBFFBLLR", "BBFBFBBLRL", "FBBFBBFLLR", "BFBFFFFLRL", "FFBBFBBLRR", "BFBBBFBLRL", "BFFBBFFRLR", "FFFFBFFRLL", "BFFBBFFLRR", "FBBBFBBRLR", "FBFBFFFLLL", "FFBBBFFRRL", "BFBBFBFRLR", "FBFFFBBRLL", "FFFBFFFLRL", "BFBBBFBRRL", "FBBFFFBRLR", "FFBBBBFLLL", "FBBBFFFLLR", "FBFFBBFLLR", "FFBFBBFRLL", "BBFFBFBRLR", "FBFFBBBLLR", "FFBFBFBRRL", "BFFBFFBLRL", "FBFFBFBLLR", "FFBFBFBLRR", "FFBBFBFLRL", "FFBBFFFRRL", "BFBFBFFLLR", "FBBBBBBRRR", "BFBFFFFRLR", "BFFBBBBRLL", "FFFFFBBRRR", "FFBFFFBRRR", "FFFBFFFLLL", "BFBFFFFRRR", "FBBBBBFRRR", "FBBBFFFRRL", "FBBFFFFRLL", "FFFFFBFLRR", "FFBFBBBLLL", "BFBFFBBRRL", "FFFFBBFLRL", "BFBBBFBRLL", "FFBFFFBLRL", "FBBFFFBRLL", "BFFBBFBLRR", "FFFBBFFLLR", "FBBFFBBRRL", "FFBFBBBRRR", "FBFBFFBLRL", "BFBBFBBRRR", "BBFFFFBLRL", "FBFBFBBLLR", "BFFFBBBLRR", "BFBFFFBRLR", "FFFBBBBLLL", "BFFBFFFLRR", "BFBBFFFRRL", "FBFFBBBLRL", "FBFBBFFLRR", "FBFFBBFRRL", "BBFBFFBRLL" };

            // Find the highest seat ID
            Console.WriteLine($"Higest Seat ID: {GetHighestSeatId(input)}");
            Console.WriteLine();

            FindMySeat(input);
        }

        public static string GetRow(string input)
        {
            char[] code = input.Substring(0, 7).ToCharArray();

            int high = 127;
            int low = 0;
            int row = 0;

            foreach (var letter in code)
            {
                int split = (high - low) / 2;
                if (letter == 'F')
                {
                    high = high - (split + 1);
                    row = high;
                }
                else if (letter == 'B')
                {
                    low = low + (split + 1);
                    row = low;
                }
            }

            return ($"{row}");
        }

        public static string GetSeat(string input)
        {
            char[] code = input.Substring(7, 3).ToCharArray();

            int high = 7;
            int low = 0;
            int seat = 0;

            foreach (var letter in code)
            {
                int split = (high - low) / 2;
                if (letter == 'L')
                {
                    high = high - (split + 1);
                    seat = high;
                }
                else if (letter == 'R')
                {
                    low = low + (split + 1);
                    seat = low;
                }
            }

            return ($"{seat}");
        }

        public static string GetSeatId(string input)
        {
            int row = Convert.ToInt32(GetRow(input));
            int seat = Convert.ToInt32(GetSeat(input));
            int seatId = (row * 8) + seat;

            return (seatId.ToString());
        }

        public static string GetHighestSeatId(List<string> input)
        {
            List<int> seatIds = new List<int>();
            foreach (var code in input)
            {
                int seatId = Convert.ToInt32(GetSeatId(code));
                seatIds.Add(seatId);
            }
            seatIds.Sort();
            int highestIndex = (seatIds.Count) - 1;


            return seatIds[highestIndex].ToString();
        }

        static void FindMySeat(List<string> input)
        {
            List<int> ids = new List<int>();
            foreach (var code in input)
            {
                int seatId = Convert.ToInt32(GetSeatId(code));
                ids.Add(seatId);
            }

            ids.Sort();

            for (int i = 0; i < ids.Count - 2; i++)
            {
                if (ids[i + 1] - ids[i] > 1)
                {
                    int seatId = ids[i] + 1;
                    int row = (ids[i] + 1) / 8;
                    int seat = (ids[i] + 1) % 8;
                    Console.WriteLine($"My Seat ID: {seatId}");
                    Console.WriteLine($"Row: {row}");
                    Console.WriteLine($"Seat: {seat}");
                }
            }
        }
    }
}
